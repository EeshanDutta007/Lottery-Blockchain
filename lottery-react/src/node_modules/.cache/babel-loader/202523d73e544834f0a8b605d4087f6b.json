{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\"use strict\";\n\nvar utils = require('web3-utils');\n\nvar BigNumber = require('bn.js');\n\nvar leftPad = function (string, bytes) {\n  var result = string;\n\n  while (result.length < bytes * 2) {\n    result = '0' + result;\n  }\n\n  return result;\n};\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\n\n\nvar iso13616Prepare = function (iban) {\n  var A = 'A'.charCodeAt(0);\n  var Z = 'Z'.charCodeAt(0);\n  iban = iban.toUpperCase();\n  iban = iban.substr(4) + iban.substr(0, 4);\n  return iban.split('').map(function (n) {\n    var code = n.charCodeAt(0);\n\n    if (code >= A && code <= Z) {\n      // A = 10, B = 11, ... Z = 35\n      return code - A + 10;\n    } else {\n      return n;\n    }\n  }).join('');\n};\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\n\n\nvar mod9710 = function (iban) {\n  var remainder = iban,\n      block;\n\n  while (remainder.length > 2) {\n    block = remainder.slice(0, 9);\n    remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n  }\n\n  return parseInt(remainder, 10) % 97;\n};\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\n\n\nvar Iban = function Iban(iban) {\n  this._iban = iban;\n};\n/**\n * This method should be used to create an ethereum address from a direct iban address\n *\n * @method toAddress\n * @param {String} iban address\n * @return {String} the ethereum address\n */\n\n\nIban.toAddress = function (ib) {\n  ib = new Iban(ib);\n\n  if (!ib.isDirect()) {\n    throw new Error('IBAN is indirect and can\\'t be converted');\n  }\n\n  return ib.toAddress();\n};\n/**\n * This method should be used to create iban address from an ethereum address\n *\n * @method toIban\n * @param {String} address\n * @return {String} the IBAN address\n */\n\n\nIban.toIban = function (address) {\n  return Iban.fromAddress(address).toString();\n};\n/**\n * This method should be used to create iban object from an ethereum address\n *\n * @method fromAddress\n * @param {String} address\n * @return {Iban} the IBAN object\n */\n\n\nIban.fromAddress = function (address) {\n  if (!utils.isAddress(address)) {\n    throw new Error('Provided address is not a valid address: ' + address);\n  }\n\n  address = address.replace('0x', '').replace('0X', '');\n  var asBn = new BigNumber(address, 16);\n  var base36 = asBn.toString(36);\n  var padded = leftPad(base36, 15);\n  return Iban.fromBban(padded.toUpperCase());\n};\n/**\n * Convert the passed BBAN to an IBAN for this country specification.\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *\n * @method fromBban\n * @param {String} bban the BBAN to convert to IBAN\n * @returns {Iban} the IBAN object\n */\n\n\nIban.fromBban = function (bban) {\n  var countryCode = 'XE';\n  var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n  var checkDigit = ('0' + (98 - remainder)).slice(-2);\n  return new Iban(countryCode + checkDigit + bban);\n};\n/**\n * Should be used to create IBAN object for given institution and identifier\n *\n * @method createIndirect\n * @param {Object} options, required options are \"institution\" and \"identifier\"\n * @return {Iban} the IBAN object\n */\n\n\nIban.createIndirect = function (options) {\n  return Iban.fromBban('ETH' + options.institution + options.identifier);\n};\n/**\n * This method should be used to check if given string is valid iban object\n *\n * @method isValid\n * @param {String} iban string\n * @return {Boolean} true if it is valid IBAN\n */\n\n\nIban.isValid = function (iban) {\n  var i = new Iban(iban);\n  return i.isValid();\n};\n/**\n * Should be called to check if iban is correct\n *\n * @method isValid\n * @returns {Boolean} true if it is, otherwise false\n */\n\n\nIban.prototype.isValid = function () {\n  return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1;\n};\n/**\n * Should be called to check if iban number is direct\n *\n * @method isDirect\n * @returns {Boolean} true if it is, otherwise false\n */\n\n\nIban.prototype.isDirect = function () {\n  return this._iban.length === 34 || this._iban.length === 35;\n};\n/**\n * Should be called to check if iban number if indirect\n *\n * @method isIndirect\n * @returns {Boolean} true if it is, otherwise false\n */\n\n\nIban.prototype.isIndirect = function () {\n  return this._iban.length === 20;\n};\n/**\n * Should be called to get iban checksum\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n *\n * @method checksum\n * @returns {String} checksum\n */\n\n\nIban.prototype.checksum = function () {\n  return this._iban.substr(2, 2);\n};\n/**\n * Should be called to get institution identifier\n * eg. XREG\n *\n * @method institution\n * @returns {String} institution identifier\n */\n\n\nIban.prototype.institution = function () {\n  return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n/**\n * Should be called to get client identifier within institution\n * eg. GAVOFYORK\n *\n * @method client\n * @returns {String} client identifier\n */\n\n\nIban.prototype.client = function () {\n  return this.isIndirect() ? this._iban.substr(11) : '';\n};\n/**\n * Should be called to get client direct address\n *\n * @method toAddress\n * @returns {String} ethereum address\n */\n\n\nIban.prototype.toAddress = function () {\n  if (this.isDirect()) {\n    var base36 = this._iban.substr(4);\n\n    var asBn = new BigNumber(base36, 36);\n    return utils.toChecksumAddress(asBn.toString(16, 20));\n  }\n\n  return '';\n};\n\nIban.prototype.toString = function () {\n  return this._iban;\n};\n\nmodule.exports = Iban;","map":{"version":3,"sources":["C:/Users/Eeshan Dutta/Documents/GitHub/lottery-react/node_modules/web3-eth-iban/lib/index.js"],"names":["utils","require","BigNumber","leftPad","string","bytes","result","length","iso13616Prepare","iban","A","charCodeAt","Z","toUpperCase","substr","split","map","n","code","join","mod9710","remainder","block","slice","parseInt","Iban","_iban","toAddress","ib","isDirect","Error","toIban","address","fromAddress","toString","isAddress","replace","asBn","base36","padded","fromBban","bban","countryCode","checkDigit","createIndirect","options","institution","identifier","isValid","i","prototype","test","isIndirect","checksum","client","toChecksumAddress","module","exports"],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\"use strict\";\nvar utils = require('web3-utils');\nvar BigNumber = require('bn.js');\nvar leftPad = function (string, bytes) {\n    var result = string;\n    while (result.length < bytes * 2) {\n        result = '0' + result;\n    }\n    return result;\n};\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nvar iso13616Prepare = function (iban) {\n    var A = 'A'.charCodeAt(0);\n    var Z = 'Z'.charCodeAt(0);\n    iban = iban.toUpperCase();\n    iban = iban.substr(4) + iban.substr(0, 4);\n    return iban.split('').map(function (n) {\n        var code = n.charCodeAt(0);\n        if (code >= A && code <= Z) {\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        }\n        else {\n            return n;\n        }\n    }).join('');\n};\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nvar mod9710 = function (iban) {\n    var remainder = iban, block;\n    while (remainder.length > 2) {\n        block = remainder.slice(0, 9);\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n    }\n    return parseInt(remainder, 10) % 97;\n};\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nvar Iban = function Iban(iban) {\n    this._iban = iban;\n};\n/**\n * This method should be used to create an ethereum address from a direct iban address\n *\n * @method toAddress\n * @param {String} iban address\n * @return {String} the ethereum address\n */\nIban.toAddress = function (ib) {\n    ib = new Iban(ib);\n    if (!ib.isDirect()) {\n        throw new Error('IBAN is indirect and can\\'t be converted');\n    }\n    return ib.toAddress();\n};\n/**\n * This method should be used to create iban address from an ethereum address\n *\n * @method toIban\n * @param {String} address\n * @return {String} the IBAN address\n */\nIban.toIban = function (address) {\n    return Iban.fromAddress(address).toString();\n};\n/**\n * This method should be used to create iban object from an ethereum address\n *\n * @method fromAddress\n * @param {String} address\n * @return {Iban} the IBAN object\n */\nIban.fromAddress = function (address) {\n    if (!utils.isAddress(address)) {\n        throw new Error('Provided address is not a valid address: ' + address);\n    }\n    address = address.replace('0x', '').replace('0X', '');\n    var asBn = new BigNumber(address, 16);\n    var base36 = asBn.toString(36);\n    var padded = leftPad(base36, 15);\n    return Iban.fromBban(padded.toUpperCase());\n};\n/**\n * Convert the passed BBAN to an IBAN for this country specification.\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *\n * @method fromBban\n * @param {String} bban the BBAN to convert to IBAN\n * @returns {Iban} the IBAN object\n */\nIban.fromBban = function (bban) {\n    var countryCode = 'XE';\n    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n    var checkDigit = ('0' + (98 - remainder)).slice(-2);\n    return new Iban(countryCode + checkDigit + bban);\n};\n/**\n * Should be used to create IBAN object for given institution and identifier\n *\n * @method createIndirect\n * @param {Object} options, required options are \"institution\" and \"identifier\"\n * @return {Iban} the IBAN object\n */\nIban.createIndirect = function (options) {\n    return Iban.fromBban('ETH' + options.institution + options.identifier);\n};\n/**\n * This method should be used to check if given string is valid iban object\n *\n * @method isValid\n * @param {String} iban string\n * @return {Boolean} true if it is valid IBAN\n */\nIban.isValid = function (iban) {\n    var i = new Iban(iban);\n    return i.isValid();\n};\n/**\n * Should be called to check if iban is correct\n *\n * @method isValid\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isValid = function () {\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&\n        mod9710(iso13616Prepare(this._iban)) === 1;\n};\n/**\n * Should be called to check if iban number is direct\n *\n * @method isDirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isDirect = function () {\n    return this._iban.length === 34 || this._iban.length === 35;\n};\n/**\n * Should be called to check if iban number if indirect\n *\n * @method isIndirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isIndirect = function () {\n    return this._iban.length === 20;\n};\n/**\n * Should be called to get iban checksum\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n *\n * @method checksum\n * @returns {String} checksum\n */\nIban.prototype.checksum = function () {\n    return this._iban.substr(2, 2);\n};\n/**\n * Should be called to get institution identifier\n * eg. XREG\n *\n * @method institution\n * @returns {String} institution identifier\n */\nIban.prototype.institution = function () {\n    return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n/**\n * Should be called to get client identifier within institution\n * eg. GAVOFYORK\n *\n * @method client\n * @returns {String} client identifier\n */\nIban.prototype.client = function () {\n    return this.isIndirect() ? this._iban.substr(11) : '';\n};\n/**\n * Should be called to get client direct address\n *\n * @method toAddress\n * @returns {String} ethereum address\n */\nIban.prototype.toAddress = function () {\n    if (this.isDirect()) {\n        var base36 = this._iban.substr(4);\n        var asBn = new BigNumber(base36, 36);\n        return utils.toChecksumAddress(asBn.toString(16, 20));\n    }\n    return '';\n};\nIban.prototype.toString = function () {\n    return this._iban;\n};\nmodule.exports = Iban;\n"]},"metadata":{},"sourceType":"script"}