{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n  if (Array.isArray(values)) {// do nothing\n  } else if (values && typeof values === \"object\") {\n    let arrayValues = [];\n    coders.forEach(function (coder) {\n      arrayValues.push(values[coder.localName]);\n    });\n    values = arrayValues;\n  } else {\n    logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n  }\n\n  if (coders.length !== values.length) {\n    logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n  }\n\n  let staticWriter = new Writer(writer.wordSize);\n  let dynamicWriter = new Writer(writer.wordSize);\n  let updateFuncs = [];\n  coders.forEach((coder, index) => {\n    let value = values[index];\n\n    if (coder.dynamic) {\n      // Get current dynamic offset (for the future pointer)\n      let dynamicOffset = dynamicWriter.length; // Encode the dynamic value into the dynamicWriter\n\n      coder.encode(dynamicWriter, value); // Prepare to populate the correct offset once we are done\n\n      let updateFunc = staticWriter.writeUpdatableValue();\n      updateFuncs.push(baseOffset => {\n        updateFunc(baseOffset + dynamicOffset);\n      });\n    } else {\n      coder.encode(staticWriter, value);\n    }\n  }); // Backfill all the dynamic offsets, now that we know the static length\n\n  updateFuncs.forEach(func => {\n    func(staticWriter.length);\n  });\n  let length = writer.writeBytes(staticWriter.data);\n  length += writer.writeBytes(dynamicWriter.data);\n  return length;\n}\nexport function unpack(reader, coders) {\n  let values = []; // A reader anchored to this base\n\n  let baseReader = reader.subReader(0); // The amount of dynamic data read; to consume later to synchronize\n\n  let dynamicLength = 0;\n  coders.forEach(coder => {\n    let value = null;\n\n    if (coder.dynamic) {\n      let offset = reader.readValue();\n      let offsetReader = baseReader.subReader(offset.toNumber());\n\n      try {\n        value = coder.decode(offsetReader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n\n      dynamicLength += offsetReader.consumed;\n    } else {\n      try {\n        value = coder.decode(reader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    }\n\n    if (value != undefined) {\n      values.push(value);\n    }\n  }); // @TODO: get rid of this an see if it still works?\n  // Consume the dynamic components in the main reader\n\n  reader.readBytes(dynamicLength); // Add any named parameters (i.e. tuples)\n\n  coders.forEach((coder, index) => {\n    let name = coder.localName;\n\n    if (!name) {\n      return;\n    }\n\n    if (name === \"length\") {\n      name = \"_length\";\n    }\n\n    if (values[name] != null) {\n      return;\n    }\n\n    const value = values[index];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, name, {\n        get: () => {\n          throw value;\n        }\n      });\n    } else {\n      values[name] = value;\n    }\n  });\n\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, i, {\n        get: () => {\n          throw value;\n        }\n      });\n    }\n  }\n\n  return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n  constructor(coder, length, localName) {\n    const type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n    const dynamic = length === -1 || coder.dynamic;\n    super(\"array\", type, localName, dynamic);\n    this.coder = coder;\n    this.length = length;\n  }\n\n  encode(writer, value) {\n    if (!Array.isArray(value)) {\n      this._throwError(\"expected array value\", value);\n    }\n\n    let count = this.length;\n\n    if (count === -1) {\n      count = value.length;\n      writer.writeValue(value.length);\n    }\n\n    logger.checkArgumentCount(count, value.length, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n    let coders = [];\n\n    for (let i = 0; i < value.length; i++) {\n      coders.push(this.coder);\n    }\n\n    return pack(writer, coders, value);\n  }\n\n  decode(reader) {\n    let count = this.length;\n\n    if (count === -1) {\n      count = reader.readValue().toNumber();\n    }\n\n    let coders = [];\n\n    for (let i = 0; i < count; i++) {\n      coders.push(new AnonymousCoder(this.coder));\n    }\n\n    return reader.coerce(this.name, unpack(reader, coders));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Eeshan Dutta/Documents/GitHub/lottery-react/node_modules/@ethersproject/abi/lib.esm/coders/array.js"],"names":["Logger","version","logger","Coder","Writer","AnonymousCoder","pack","writer","coders","values","Array","isArray","arrayValues","forEach","coder","push","localName","throwArgumentError","length","staticWriter","wordSize","dynamicWriter","updateFuncs","index","value","dynamic","dynamicOffset","encode","updateFunc","writeUpdatableValue","baseOffset","func","writeBytes","data","unpack","reader","baseReader","subReader","dynamicLength","offset","readValue","offsetReader","toNumber","decode","error","code","errors","BUFFER_OVERRUN","baseType","name","type","consumed","undefined","readBytes","Error","Object","defineProperty","get","i","freeze","ArrayCoder","constructor","_throwError","count","writeValue","checkArgumentCount","coerce"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n    if (Array.isArray(values)) {\n        // do nothing\n    }\n    else if (values && typeof (values) === \"object\") {\n        let arrayValues = [];\n        coders.forEach(function (coder) {\n            arrayValues.push(values[coder.localName]);\n        });\n        values = arrayValues;\n    }\n    else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== values.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = values[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.writeBytes(staticWriter.data);\n    length += writer.writeBytes(dynamicWriter.data);\n    return length;\n}\nexport function unpack(reader, coders) {\n    let values = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    // The amount of dynamic data read; to consume later to synchronize\n    let dynamicLength = 0;\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n            dynamicLength += offsetReader.consumed;\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // @TODO: get rid of this an see if it still works?\n    // Consume the dynamic components in the main reader\n    reader.readBytes(dynamicLength);\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder, index) => {\n        let name = coder.localName;\n        if (!name) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        const value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                get: () => { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                get: () => { throw value; }\n            });\n        }\n    }\n    return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        this.coder = coder;\n        this.length = length;\n    }\n    encode(writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(count, value.length, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}