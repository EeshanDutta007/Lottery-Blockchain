{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {}\nexport class TransactionDescription extends Description {}\nexport class Indexed extends Description {\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n\n}\n\nfunction wrapAccessError(property, error) {\n  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n  wrap.error = error;\n  return wrap;\n}\n\nfunction checkNames(fragment, type, params) {\n  params.reduce((accum, param) => {\n    if (param.name) {\n      if (accum[param.name]) {\n        logger.throwArgumentError(`duplicate ${type} parameter ${JSON.stringify(param.name)} in ${fragment.format(\"full\")}`, \"fragment\", fragment);\n      }\n\n      accum[param.name] = true;\n    }\n\n    return accum;\n  }, {});\n}\n\nexport class Interface {\n  constructor(fragments) {\n    logger.checkNew(new.target, Interface);\n    let abi = [];\n\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n\n    defineReadOnly(this, \"fragments\", abi.map(fragment => {\n      return Fragment.from(fragment);\n    }).filter(fragment => fragment != null));\n    defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {}); // Add all fragments by their signature\n\n    this.fragments.forEach(fragment => {\n      let bucket = null;\n\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          }\n\n          checkNames(fragment, \"input\", fragment.inputs);\n          defineReadOnly(this, \"deploy\", fragment);\n          return;\n\n        case \"function\":\n          checkNames(fragment, \"input\", fragment.inputs);\n          checkNames(fragment, \"output\", fragment.outputs);\n          bucket = this.functions;\n          break;\n\n        case \"event\":\n          checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.events;\n          break;\n\n        default:\n          return;\n      }\n\n      let signature = fragment.format();\n\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n\n      bucket[signature] = fragment;\n    }); // If we do not have a constructor add a default\n\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n\n  format(format) {\n    if (!format) {\n      format = FormatTypes.full;\n    }\n\n    if (format === FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n    }\n\n    const abi = this.fragments.map(fragment => fragment.format(format)); // We need to re-bundle the JSON fragments a bit\n\n    if (format === FormatTypes.json) {\n      return JSON.stringify(abi.map(j => JSON.parse(j)));\n    }\n\n    return abi;\n  } // Sub-classes can override these to handle other blockchains\n\n\n  static getAbiCoder() {\n    return defaultAbiCoder;\n  }\n\n  static getAddress(address) {\n    return getAddress(address);\n  }\n\n  static getSighash(functionFragment) {\n    return hexDataSlice(id(functionFragment.format()), 0, 4);\n  }\n\n  static getEventTopic(eventFragment) {\n    return id(eventFragment.format());\n  } // Find a function definition by any means necessary (unless it is ambiguous)\n\n\n  getFunction(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      for (const name in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name)) {\n          return this.functions[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.functions).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n      }\n\n      return this.functions[matching[0]];\n    } // Normlize the signature and lookup the function\n\n\n    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n\n    return result;\n  } // Find an event definition by any means necessary (unless it is ambiguous)\n\n\n  getEvent(nameOrSignatureOrTopic) {\n    if (isHexString(nameOrSignatureOrTopic)) {\n      const topichash = nameOrSignatureOrTopic.toLowerCase();\n\n      for (const name in this.events) {\n        if (topichash === this.getEventTopic(name)) {\n          return this.events[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrTopic.trim();\n      const matching = Object.keys(this.events).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n      }\n\n      return this.events[matching[0]];\n    } // Normlize the signature and lookup the function\n\n\n    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n\n    return result;\n  } // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n\n\n  getSighash(functionFragment) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return getStatic(this.constructor, \"getSighash\")(functionFragment);\n  } // Get the topic (the bytes32 hash) used by Solidity to identify an event\n\n\n  getEventTopic(eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  }\n\n  _decodeParams(params, data) {\n    return this._abiCoder.decode(params, data);\n  }\n\n  _encodeParams(params, values) {\n    return this._abiCoder.encode(params, values);\n  }\n\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  } // Decode the data for a function call (e.g. tx.data)\n\n\n  decodeFunctionData(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    const bytes = arrayify(data);\n\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n    }\n\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  } // Encode the data for a function call (e.g. tx.data)\n\n\n  encodeFunctionData(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  } // Decode the result from a function call (e.g. from eth_call)\n\n\n  decodeFunctionResult(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    let bytes = arrayify(data);\n    let reason = null;\n    let errorSignature = null;\n\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n\n        break;\n\n      case 4:\n        if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n          errorSignature = \"Error(string)\";\n          reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n        }\n\n        break;\n    }\n\n    return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      errorSignature: errorSignature,\n      errorArgs: [reason],\n      reason: reason\n    });\n  } // Encode the result for a function call (e.g. for eth_call)\n\n\n  encodeFunctionResult(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  } // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n\n\n  encodeFilterTopics(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n\n    let topics = [];\n\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256(hexlify(value));\n      } // Check addresses are valid\n\n\n      if (param.type === \"address\") {\n        this._abiCoder.encode([\"address\"], [value]);\n      }\n\n      return hexZeroPad(hexlify(value), 32);\n    };\n\n    values.forEach((value, index) => {\n      let param = eventFragment.inputs[index];\n\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n\n        return;\n      }\n\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    }); // Trim off trailing nulls\n\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n\n    return topics;\n  }\n\n  encodeEventLog(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n\n    if (values.length !== eventFragment.inputs.length) {\n      logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n    }\n\n    eventFragment.inputs.forEach((param, index) => {\n      const value = values[index];\n\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TOOD\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this._abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this._abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  } // Decode a filter for the event and the search criteria\n\n\n  decodeEventLog(eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (topics != null && !eventFragment.anonymous) {\n      let topicHash = this.getEventTopic(eventFragment);\n\n      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n\n      topics = topics.slice(1);\n    }\n\n    let indexed = [];\n    let nonIndexed = [];\n    let dynamic = [];\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n\n    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data);\n\n    let result = [];\n    let nonIndexedIndex = 0,\n        indexedIndex = 0;\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          try {\n            result[index] = resultIndexed[indexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n      } else {\n        try {\n          result[index] = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          result[index] = error;\n        }\n      } // Add the keyword argument if named and safe\n\n\n      if (param.name && result[param.name] == null) {\n        const value = result[index]; // Make error named values throw on access\n\n        if (value instanceof Error) {\n          Object.defineProperty(result, param.name, {\n            get: () => {\n              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);\n            }\n          });\n        } else {\n          result[param.name] = value;\n        }\n      }\n    }); // Make all error indexed values throw on access\n\n    for (let i = 0; i < result.length; i++) {\n      const value = result[i];\n\n      if (value instanceof Error) {\n        Object.defineProperty(result, i, {\n          get: () => {\n            throw wrapAccessError(`index ${i}`, value);\n          }\n        });\n      }\n    }\n\n    return Object.freeze(result);\n  } // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n\n\n  parseTransaction(tx) {\n    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n\n    if (!fragment) {\n      return null;\n    }\n\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: BigNumber.from(tx.value || \"0\")\n    });\n  } // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n\n\n  parseLog(log) {\n    let fragment = this.getEvent(log.topics[0]);\n\n    if (!fragment || fragment.anonymous) {\n      return null;\n    } // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe jsut a fragment?\n\n\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  }\n  /*\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n      if (Interface.isInterface(value)) {\n          return value;\n      }\n      if (typeof(value) === \"string\") {\n          return new Interface(JSON.parse(value));\n      }\n      return new Interface(value);\n  }\n  */\n\n\n  static isInterface(value) {\n    return !!(value && value._isInterface);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Eeshan Dutta/Documents/GitHub/lottery-react/node_modules/@ethersproject/abi/lib.esm/interface.js"],"names":["getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","TransactionDescription","Indexed","isIndexed","value","_isIndexed","wrapAccessError","property","error","wrap","Error","checkNames","fragment","type","params","reduce","accum","param","name","throwArgumentError","JSON","stringify","format","Interface","constructor","fragments","checkNew","new","target","abi","parse","map","from","filter","forEach","bucket","deploy","warn","inputs","outputs","functions","events","signature","payable","full","sighash","json","j","getAbiCoder","address","getSighash","functionFragment","getEventTopic","eventFragment","getFunction","nameOrSignatureOrSighash","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","_decodeParams","data","_abiCoder","decode","_encodeParams","values","encode","encodeDeploy","decodeFunctionData","bytes","slice","encodeFunctionData","decodeFunctionResult","reason","errorSignature","_getWordSize","throwError","errors","CALL_EXCEPTION","method","errorArgs","encodeFunctionResult","encodeFilterTopics","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","index","indexed","baseType","Array","isArray","pop","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","get","i","freeze","parseTransaction","tx","substring","args","parseLog","log","topic","isInterface","_isInterface"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\nfunction checkNames(fragment, type, params) {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${type} parameter ${JSON.stringify(param.name)} in ${fragment.format(\"full\")}`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, {});\n}\nexport class Interface {\n    constructor(fragments) {\n        logger.checkNew(new.target, Interface);\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic((new.target), \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    checkNames(fragment, \"input\", fragment.inputs);\n                    checkNames(fragment, \"output\", fragment.outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(functionFragment) {\n        return hexDataSlice(id(functionFragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(functionFragment) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return getStatic(this.constructor, \"getSighash\")(functionFragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4:\n                if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n                    errorSignature = \"Error(string)\";\n                    reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n                }\n                break;\n        }\n        return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            errorSignature: errorSignature,\n            errorArgs: [reason],\n            reason: reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TOOD\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe jsut a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}